{"version":3,"sources":["ControlledMaze.tsx","Maze.tsx","store/maze/actions.ts","store/maze/reducer.ts","store/rootReducer.ts","store/store.ts","Controls.tsx","App.tsx","index.tsx"],"names":["ControlledMaze","connect","_ref","maze","cellWidth","cellSize","cellHeight","rows","cols","bgColor1","bgColor2","width","height","_useState","useState","_useState2","Object","slicedToArray","ctx","setCtx","canvasRef","useCallback","canvas","getContext","useEffect","row","col","x","y","fillStyle","fillRect","react_default","a","createElement","className","ref","setCellSize","actionCreatorFactory","action","mazeReducer","reducerWithInitialState","case","state","objectSpread","rootReducer","combineReducers","store","createStore","Controls","_ref2","dispatch","Fragment","type","min","max","onChange","e","parseInt","target","value","toString","App","es","ReactDOM","render","src_App","document","getElementById"],"mappings":"yOAIaA,SAAiBC,YAC5B,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,MAA0B,CACxBC,UAAWD,EAAKE,SAChBC,WAAYH,EAAKE,WAHSJ,CCS5B,SAAAC,GAA+D,IAA5DK,EAA4DL,EAA5DK,KAAMC,EAAsDN,EAAtDM,KAAMJ,EAAgDF,EAAhDE,UAAWE,EAAqCJ,EAArCI,WAAYG,EAAyBP,EAAzBO,SAAUC,EAAeR,EAAfQ,SACxCC,EAAQH,EAAOJ,EACfQ,EAASL,EAAOD,EAFuCO,EAIzCC,mBAA0C,MAJDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIxDK,EAJwDH,EAAA,GAInDI,EAJmDJ,EAAA,GAMvDK,EAAYC,sBAAY,SAACC,GAC7BH,EAAOG,EAAOC,WAAW,QACxB,IAqBH,OAnBAC,oBAAU,WACR,GAAKN,EAIL,IAAK,IAAIO,EAAM,EAAGA,EAAMlB,IAAQkB,EAC9B,IAAK,IAAIC,EAAM,EAAGA,EAAMlB,IAAQkB,EAAK,CACnC,IAAMC,EAAID,EAAMtB,EACVwB,EAAIH,EAAMnB,EAEdY,EAAIW,WADDJ,EAAMC,GAAO,IAAM,EACNjB,EAEAC,EAElBQ,EAAIY,SAASH,EAAGC,EAAGxB,EAAWE,KAGjC,CAACC,EAAMC,EAAMJ,EAAWE,EAAYG,EAAUC,EAAUQ,IAGzDa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQE,IAAKf,EAAWT,MAAOA,EAAOC,OAAQA,gCCxCzCwB,EAFEC,+BAAqB,OAETC,CAAe,iBCO7BC,EAAcC,kCAJK,CAC9BnC,SAAU,KAIToC,KACCL,EACA,SAACM,EAAOrC,GAAR,OAAAW,OAAA2B,EAAA,EAAA3B,CAAA,GACK0B,EADL,CAEErC,sBCTOuC,EACXC,YAA2B,CACzB1C,KAAMoC,ICNGO,EAAQC,YACjBH,GCuBSI,EAAW/C,YACtB,SAAAgD,GAAA,MAAkD,CAChD5C,SADF4C,EAAG9C,KACcE,WAEjB,SAAC6C,GAAD,MAAmD,CACjDd,YAAa,SAAC/B,GAAD,OAAsB6C,EAASd,EAAY/B,OALpCJ,CAZtB,SAAAC,GAAA,IAAEG,EAAFH,EAAEG,SAAU+B,EAAZlC,EAAYkC,YAAZ,OACEL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAAA,SACEmB,KAAK,SACLC,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GAAC,OAAIpB,EAAYqB,SAASD,EAAEE,OAAOC,QAAU,IACvDA,MAAOtD,EAASuD,gBCATC,MAff,WACE,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAUhB,MAAOA,GACff,EAAAC,EAAAC,cAACe,EAAD,MAEAjB,EAAAC,EAAAC,cAACjC,EAAD,CACEO,KAAM,GACNC,KAAM,GACNC,SAAS,OACTC,SAAS,WCXjBqD,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1328a54e.chunk.js","sourcesContent":["import { RootState } from './store/rootReducer';\nimport { connect } from 'react-redux';\nimport { Maze } from './Maze'\n\nexport const ControlledMaze = connect(\n  ({ maze }: RootState) => ({\n    cellWidth: maze.cellSize,\n    cellHeight: maze.cellSize,\n  })\n)(Maze)\n","import React, { useState, useCallback, useEffect } from 'react'\nimport './Maze.css'\n\nexport interface MazeProps {\n  rows: number\n  cols: number\n  cellWidth: number\n  cellHeight: number\n  bgColor1: string\n  bgColor2: string\n}\n\nexport const Maze: React.FunctionComponent<MazeProps> =\n  ({ rows, cols, cellWidth, cellHeight, bgColor1, bgColor2 }) => {\n    const width = cols * cellWidth;\n    const height = rows * cellHeight;\n\n    let [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null)\n\n    const canvasRef = useCallback((canvas: HTMLCanvasElement) => {\n      setCtx(canvas.getContext('2d'));\n    }, []);\n\n    useEffect(() => {\n      if (!ctx) {\n        return;\n      }\n\n      for (let row = 0; row < rows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          const x = col * cellWidth;\n          const y = row * cellHeight;\n          if ((row + col) % 2 === 0) {\n            ctx.fillStyle = bgColor1;\n          } else {\n            ctx.fillStyle = bgColor2;\n          }\n          ctx.fillRect(x, y, cellWidth, cellHeight);\n        }\n      }\n    }, [rows, cols, cellWidth, cellHeight, bgColor1, bgColor2, ctx])\n\n    return (\n      <div className='Maze'>\n        <canvas ref={canvasRef} width={width} height={height}></canvas>\n      </div>\n    )\n  }\n","import { actionCreatorFactory } from 'typescript-fsa'\n\nconst action = actionCreatorFactory('MAZE');\n\nexport const setCellSize = action<number>('SET_CELL_SIZE');\n","import { reducerWithInitialState } from 'typescript-fsa-reducers'\nimport { setCellSize } from './actions';\n\nexport interface MazeState {\n  cellSize: number\n}\n\nconst initialState: MazeState = {\n  cellSize: 40\n}\n\nexport const mazeReducer = reducerWithInitialState(initialState)\n  .case(\n    setCellSize,\n    (state, cellSize): MazeState => ({\n      ...state,\n      cellSize\n    })\n  )\n","import { MazeState, mazeReducer } from './maze/reducer';\nimport { combineReducers } from 'redux';\n\nexport interface RootState {\n    maze: MazeState\n}\n\nexport const rootReducer =\n  combineReducers<RootState>({\n    maze: mazeReducer\n  })\n","import { rootReducer } from './rootReducer';\nimport { createStore } from 'redux';\n\nexport const store = createStore(\n    rootReducer\n)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from './store/rootReducer';\nimport { Dispatch } from 'redux';\nimport { setCellSize } from './store/maze/actions';\n\nexport interface ControlsComponentProps {\n  cellSize: number\n}\n\nexport interface ControlsComponentActions {\n  setCellSize: (cellSize: number) => void\n}\n\nconst ControlsComponent: React.FunctionComponent<ControlsComponentProps & ControlsComponentActions> =\n  ({cellSize, setCellSize}) => (\n    <>\n      <input\n        type=\"number\"\n        min={5}\n        max={100}\n        onChange={e => setCellSize(parseInt(e.target.value) || 0)}\n        value={cellSize.toString()}\n      />\n    </>\n  )\n\nexport const Controls = connect(\n  ({ maze }: RootState): ControlsComponentProps => ({\n    cellSize: maze.cellSize\n  }),\n  (dispatch: Dispatch): ControlsComponentActions => ({\n    setCellSize: (cellSize: number) => dispatch(setCellSize(cellSize))\n  })\n)(ControlsComponent)\n","import React from 'react';\nimport { ControlledMaze } from './ControlledMaze'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store';\nimport { Controls } from './Controls';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Controls />\n\n      <ControlledMaze\n        rows={20}\n        cols={20}\n        bgColor1='#ddf'\n        bgColor2='#eef'\n      />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}