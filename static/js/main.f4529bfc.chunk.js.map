{"version":3,"sources":["Maze.tsx","App.tsx","index.tsx"],"names":["Maze","_ref","rows","cols","cellWidth","cellHeight","bgColor1","bgColor2","width","height","_useState","useState","_useState2","Object","slicedToArray","ctx","setCtx","canvasRef","useCallback","canvas","getContext","useEffect","row","col","x","y","fillStyle","fillRect","react_default","a","createElement","className","ref","App","Maze_Maze","ReactDOM","render","src_App","document","getElementById"],"mappings":"8NAYaA,SACX,SAAAC,GAA+D,IAA5DC,EAA4DD,EAA5DC,KAAMC,EAAsDF,EAAtDE,KAAMC,EAAgDH,EAAhDG,UAAWC,EAAqCJ,EAArCI,WAAYC,EAAyBL,EAAzBK,SAAUC,EAAeN,EAAfM,SACxCC,EAAQL,EAAOC,EACfK,EAASP,EAAOG,EAFuCK,EAIzCC,mBAA0C,MAJDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIxDK,EAJwDH,EAAA,GAInDI,EAJmDJ,EAAA,GAMvDK,EAAYC,sBAAY,SAACC,GAC7BH,EAAOG,EAAOC,WAAW,QACxB,IAqBH,OAnBAC,oBAAU,WACR,GAAKN,EAIL,IAAK,IAAIO,EAAM,EAAGA,EAAMpB,IAAQoB,EAC9B,IAAK,IAAIC,EAAM,EAAGA,EAAMpB,IAAQoB,EAAK,CACnC,IAAMC,EAAID,EAAMnB,EACVqB,EAAIH,EAAMjB,EAEdU,EAAIW,WADDJ,EAAMC,GAAO,IAAM,EACNjB,EAEAC,EAElBQ,EAAIY,SAASH,EAAGC,EAAGrB,EAAWC,KAGjC,CAACH,EAAMC,EAAMC,EAAWC,EAAYC,EAAUC,EAAUQ,IAGzDa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQE,IAAKf,EAAWT,MAAOA,EAAOC,OAAQA,OC5BvCwB,MAbf,WACE,OACEL,EAAAC,EAAAC,cAACI,EAAD,CACEhC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,SAAS,OACTC,SAAS,UCNf4B,IAASC,OAAOR,EAAAC,EAAAC,cAACO,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f4529bfc.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport './Maze.css'\n\nexport interface MazeProps {\n  rows: number\n  cols: number\n  cellWidth: number\n  cellHeight: number\n  bgColor1: string\n  bgColor2: string\n}\n\nexport const Maze: React.FunctionComponent<MazeProps> =\n  ({ rows, cols, cellWidth, cellHeight, bgColor1, bgColor2 }) => {\n    const width = cols * cellWidth;\n    const height = rows * cellHeight;\n\n    let [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null)\n\n    const canvasRef = useCallback((canvas: HTMLCanvasElement) => {\n      setCtx(canvas.getContext('2d'));\n    }, []);\n\n    useEffect(() => {\n      if (!ctx) {\n        return;\n      }\n\n      for (let row = 0; row < rows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          const x = col * cellWidth;\n          const y = row * cellHeight;\n          if ((row + col) % 2 === 0) {\n            ctx.fillStyle = bgColor1;\n          } else {\n            ctx.fillStyle = bgColor2;\n          }\n          ctx.fillRect(x, y, cellWidth, cellHeight);\n        }\n      }\n    }, [rows, cols, cellWidth, cellHeight, bgColor1, bgColor2, ctx])\n\n    return (\n      <div className='Maze'>\n        <canvas ref={canvasRef} width={width} height={height}></canvas>\n      </div>\n    )\n  }\n","import React from 'react';\nimport { Maze } from './Maze'\n\nfunction App() {\n  return (\n    <Maze\n      rows={50}\n      cols={50}\n      cellWidth={10}\n      cellHeight={10}\n      bgColor1='#ddf'\n      bgColor2='#eef'\n    />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}